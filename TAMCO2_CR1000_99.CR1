'CR1000 Series Datalogger
'To create a different opening program template, type in new
'instructions and select Template | Save as Default Template
'date:
'program author:
SequentialMode

Dim I As Long
Dim J As Long
'Declare Public Variables
'Example:
Public TIM As Float
Public TIM1 As Float
Public TIM2 As Float
Public PV_CALMODE As Long
Public PV_CALCOUNT As Long
Public PV_5MINCOUNT As Long
Public PV_PICARRODATAEXISTS As Boolean
Public PV_5MINCOUNT_SUPRESS As Boolean
Public PV_LICORSERIALRECEIVE As String *100
Public PV_SYSMODE As Long
Public PV_SYSMODESUB As Boolean
Public PV_RECALCULATECOCAL As Boolean
Public PV_RECALCULATECO2CAL As Boolean
Public PV_SYSMODECO2 As Long
Public PV_SYSMODECO As Long
Public PV_SMCOUNTCO2 As Long
Public PV_SMCOUNTCO As Long

Public PV_SYSMODECO_OLD As Long
Public PV_SYSMODECO2_OLD As Long

Public PV_COMODE As Long
Public PV_COO2MODE As Long
Public PV_MOD5SEC As Long
Public PV_MOD30SEC As Long

Public PV_MOD7STEP1 As Long
Public PV_MOD7STEP2 As Long
Public PV_MOD7STEP3 As Long
Public PV_MOD7STEP4 As Long
Public PV_MOD7STEP5 As Long
Public PV_MOD7STEP6 As Long
Public PV_MOD7STEP7 As Long

Public CD16A_SOLENOIDS(16) As Boolean
Public CD16B_PUMPS_N_POWER(16) As Boolean
Public SDMAO4OUT(4) As Float


Public LC_AOBCO2 As Float
Public LC_AOBH2O As Float

Public CRXD3_LIBXPR
Public CRXD4_TROOM
Public CRXD5_PAR
Public CRXP1_RAIN 

Public PA_5MMODS(20) As Long
Public PA_MUX1(32) As Float
Public PA_MUX2(32) As Float
Public PA_TIME(9) As Float
Public PA_LICORSERIAL(12) As Float
Public PA_TECOSERIAL(6) As Float
Public PA_PICARROSERIAL(12) As Float
Public PA_FLAG(20) As Boolean
Public PA_DUMMY(10) As Float
Public PA_ERRPUMP(4) As Boolean
Public PA_PUMPRESTART(4) As Boolean
Public PA_SYSMODESUBOLD(10) As Long
Public PA_SYSMODESUBNEW(10) As Long

Public PV_ERROR_PUMP_COUNT(4) As Boolean
Public PV_SINTODAY As Long
Public PV_FLASKFREQ As Long '2=EVERYDAY, 1= EVERYOTHERDAY
Public PV_DAYOFYEARMOD2 As Long
Public PV_FLASKSAMPLE_SINTODAY1 As Long
Public PV_FLASKSAMPLE_SINTODAY2 As Long
Public PV_FLASKSAMPLE As Boolean
Public PV_FLASKDWELLSYSMODE As Long '= 2323 '
Public PV_FLASKDWELL5MININTERVALS As Long ' = 1800
Public PV_FLASKDWELL5MCOUNT As Long
Public PV_SECONDSSINCEFLASKTRIGGER As Long
Public PV_FLASKSAMPLINGDWELL As Boolean 



Public PV_CO2ESTIMATE As Float
Public PV_LICOROFFSET As Float
Public PV_LASTC1 As Float
Public PV_LASTC2 As Float
Public PV_LASTC3 As Float
Public PV_LASTC4 As Float
Public PV_LASTCT As Float
Public PV_CO2RUNAVG As Float
Public PV_MLIN_CO2 As Float
Public PV_BLIN_CO2 As Float
Public PV_C1VALUE As Float
Public PV_C2VALUE As Float
Public PV_C3VALUE As Float
Public PV_C4VALUE As Float
Public AVGX, AVGY, SXX, SXY As Float
Public PV_CO2CALC2 As Float

Public PV_COESTIMATE As Float
Public PV_LASTCOLOW As Float
Public PV_LASTCOHIGH As Float
Public PV_LASTCOTGT As Float
Public PV_LASTCOZERO As Float
Public PV_CORUNAVG As Float
Public PV_COLVALUE, PV_COHVALUE, PV_COTVALUE As Float
Public COAVGX, COAVGY, COSXX, COSXY As Float
Public PV_MLIN_CO As Float
Public PV_BLIN_CO As Float
Public PV_COCALZERO As Float
Public LA_LGRSERIAL(10) As Float


Public x As Float

Alias PA_5MMODS(1) = PV_5MMOD7
Alias PA_5MMODS(2) = PV_5MMOD14
Alias PA_5MMODS(3) = PV_5MMOD28
Alias PA_5MMODS(4) = PV_5MMOD240
Alias PA_5MMODS(5) = PV_5MMOD273
Alias PA_5MMODS(6) = PV_5MMOD1911

Alias PA_LICORSERIAL(1) = LS1_CO2AW
Alias PA_LICORSERIAL(2) = LS2_CO2BW
Alias PA_LICORSERIAL(3) = LS3_CO2RAW
Alias PA_LICORSERIAL(4) = LS4_H2OAW
Alias PA_LICORSERIAL(5) = LS5_H2OBW
Alias PA_LICORSERIAL(6) = LS6_H2OD
Alias PA_LICORSERIAL(7) = LS7_LITEMP
Alias PA_LICORSERIAL(8) = LS8_LIPRESS
Alias PA_LICORSERIAL(9) = LS9_AGCCO2
Alias PA_LICORSERIAL(10) = LS10_AGCH2O
Alias PA_LICORSERIAL(11) = LS11_RHDET
Alias PA_TECOSERIAL(3) = TC_CORAW

Alias PA_TIME(1) = PV_YEAR
Alias PA_TIME(2) = PV_MONTH
Alias PA_TIME(3) = PV_DAYOFMONTH
Alias PA_TIME(4) = PV_HOURS
Alias PA_TIME(5) = PV_MINUTES
Alias PA_TIME(6) = PV_SECONDS
Alias PA_TIME(7) = PV_MICROSECONDS
Alias PA_TIME(8) = PV_DAYOFWEEK
Alias PA_TIME(9) = PV_DAYOFYEAR

Alias PA_MUX1(1) = M1D1_CO2FLOW
Alias PA_MUX1(2) = M1D2_CO2PRESS
Alias PA_MUX1(3) = M1D3_LIMSET
Alias PA_MUX1(4) = M1D4_LIMTMP
Alias PA_MUX1(5) = M1D5_REFFLOW
Alias PA_MUX1(6) = M1D6_COFLOW
Alias PA_MUX1(7) = M1D7_COPRESS
Alias PA_MUX1(8) = M1D8_TECOMSET
Alias PA_MUX1(9) = M1D9_TECOMTMP
Alias PA_MUX1(10) = M1D10_TECVRH
Alias PA_MUX1(11) = M1D11_TECOVTMP
Alias PA_MUX1(12) = M1D12_LIQALMF1
Alias PA_MUX1(13) = M1D13_BPR1
Alias PA_MUX1(14) = M1D14_BPR2
Alias PA_MUX1(15) = M1D15_BPR3
Alias PA_MUX1(16) = M1D16_BPFLOW1
Alias PA_MUX1(17) = M1D17_BPFLOW2
Alias PA_MUX1(18) = M1D18_BPFLOW3
Alias PA_MUX1(19) = M1D19_EXHPRESS
Alias PA_MUX1(20) = M1D20_LIQALMF2
Alias PA_MUX1(21) = M1D21_TANK1P
Alias PA_MUX1(22) = M1D22_TANK2P
Alias PA_MUX1(23) = M1D23_TANK3P
Alias PA_MUX1(24) = M1D24_TANK4P
Alias PA_MUX1(25) = M1D25_TANK5P
Alias PA_MUX1(26) = M1D26_TANK6P
Alias PA_MUX1(27) = M1D27_TANK7P
Alias PA_MUX1(28) = M1D28_TANK8P
Alias PA_MUX1(29) = M1D29_TANK9P
Alias PA_MUX1(30) = M1D30_TANK10P
Alias PA_MUX1(31) = M1D31_AMBPRESS
Alias PA_MUX1(32) = M1D32_LIQALMF3

Alias PA_MUX2(1) = M2D1_NAFLOW
Alias PA_MUX2(2) = M2D2_NAFWTLWT
Alias PA_MUX2(3) = M2D3_NAFLM35T
Alias PA_MUX2(4) = M2D4_MANDCTMP
Alias PA_MUX2(5) = M2D5_PUMPBXTMP
Alias PA_MUX2(6) = M2D6_M2SPARE6
Alias PA_MUX2(7) = M2D7_M2SPARE7
Alias PA_MUX2(8) = M2D8_M2SPARE8
Alias PA_MUX2(9) = M2D9_FLSKFLOW
Alias PA_MUX2(10) = M2D10_FLSKPRES
Alias PA_MUX2(11) = M2D11_TECOVTMP
Alias PA_MUX2(12) = M2D12_M2SPARE12
Alias PA_MUX2(13) = M2D13_M2SPARE13
Alias PA_MUX2(14) = M2D14_M2SPARE14
Alias PA_MUX2(15) = M2D15_M2SPARE15
Alias PA_MUX2(16) = M2D16_M2SPARE16
Alias PA_MUX2(17) = M2D17_M2SPARE17
Alias PA_MUX2(18) = M2D18_M2SPARE18
Alias PA_MUX2(19) = M2D19_M2SPARE19
Alias PA_MUX2(20) = M2D20_M2SPARE20
Alias PA_MUX2(21) = M2D21_M2SPARE21
Alias PA_MUX2(22) = M2D22_M2SPARE22
Alias PA_MUX2(23) = M2D23_M2SPARE23
Alias PA_MUX2(24) = M2D24_M2SPARE24
Alias PA_MUX2(25) = M2D25_M2SPARE25
Alias PA_MUX2(26) = M2D26_M2SPARE26
Alias PA_MUX2(27) = M2D27_M2SPARE27
Alias PA_MUX2(28) = M2D28_M2SPARE28
Alias PA_MUX2(29) = M2D29_M2SPARE29
Alias PA_MUX2(30) = M2D30_M2SPARE30
Alias PA_MUX2(31) = M2D31_M2SPARE31
Alias PA_MUX2(32) = M2D22_M2SPARE32

Alias SDMAO4OUT(1) = SDMAO41_CO2FLOW
Alias SDMAO4OUT(2) = SDMAO42_CO2PRES
Alias SDMAO4OUT(3) = SDMAO43_COFLOW
Alias SDMAO4OUT(4) = SDMAO44_COPRES

'Alias PA_PICARROSERIAL(1) = PS1_PSCAVPRESS
'Alias PA_PICARROSERIAL(2) = PS2_PSCAVTEMPC
'Alias PA_PICARROSERIAL(3) = PS3_PSCO
'Alias PA_PICARROSERIAL(4) = PS4_PSCO2
'Alias PA_PICARROSERIAL(5) = PS5_PSCO2DRY
'Alias PA_PICARROSERIAL(6) = PS6_PSCH4
'Alias PA_PICARROSERIAL(7) = PS7_PSCH4DRY
'Alias PA_PICARROSERIAL(8) = PS8_PSH2O
'Alias PA_PICARROSERIAL(9) = PS9_PSBH2OPCT
'Alias PA_PICARROSERIAL(10) = PS10_PSPEAK84
'Alias PA_PICARROSERIAL(11) = PS11_PSX
'Alias PA_PICARROSERIAL(12) = PS12_PSY

Alias PA_PICARROSERIAL(1) = PS3_PSCO 
Alias PA_PICARROSERIAL(2) = PS4_PSCO2 
Alias PA_PICARROSERIAL(3) = PS1_PSCAVPRESS
Alias PA_PICARROSERIAL(4) = PS2_PSCAVTEMPC
Alias PA_PICARROSERIAL(5) = PS8_PSH2O
Alias PA_PICARROSERIAL(6) = PS7_PSOUTVALVE 
Alias PA_PICARROSERIAL(7) = PS9_PSBH2OPCT 
Alias PA_PICARROSERIAL(8) = PS10_PSPEAK84

Alias LA_LGRSERIAL(1) = PS1_PS1
Alias LA_LGRSERIAL(2) = PS2_PS2
Alias LA_LGRSERIAL(3) = PS3_PS3
Alias LA_LGRSERIAL(4) = PS4_PS4
Alias LA_LGRSERIAL(5) = PS5_PS5
Alias LA_LGRSERIAL(6) = PS6_PS6
Alias LA_LGRSERIAL(7) = PS7_PS7
Alias LA_LGRSERIAL(8) = PS8_PS8
Alias LA_LGRSERIAL(9) = PS9_PS9
Alias LA_LGRSERIAL(10) = PS10_PS10

 
'Declare Other Variables'Example:'Dim Counter

'Declare Constants'Example:'CONST PI = 3.141592654	

'Define Data Tables

DataTable (lab_test,-1,-1)
		DataInterval (25,30,Sec,10)
 		Average (1,PV_CO2ESTIMATE,IEEE4,FALSE)
 		Average (1,PV_COESTIMATE,IEEE4,FALSE)
EndTable

DataTable (lab_raw,-1,-1)
	DataInterval (25,30,Sec,10)
	Sample (1,PV_SYSMODE,UINT2)
  Sample (1,PV_SYSMODECO2,UINT2)
  Sample (1,PV_SYSMODECO,UINT2)
  Sample (1,PV_SMCOUNTCO2,UINT2)
  Sample (1,PV_SMCOUNTCO,UINT2)
  Average (1,PV_SYSMODE,FP2,False)
  Average (1,PV_SYSMODECO2,FP2,FALSE)
  Average (1,PV_SYSMODECO,FP2,False)
  Average (1,PV_SMCOUNTCO2,FP2,False)
  Average (1,PV_SMCOUNTCO,FP2,False)
  Average (32,M1D1_CO2FLOW,fp2,False) ' mux 1
  Average (5,PA_MUX2(1),fp2,False) ' mux 2sys
  Average (1,CRXD3_LIBXPR,FP2,FALSE)
  Average (1,CRXD4_TROOM,FP2,FALSE)
  Average (1,CRXD5_PAR,FP2,FALSE)
  Totalize (1,CRXP1_RAIN,fp2,False) ' CR1000 BOARD SIGNALS
  Average (11,PA_LICORSERIAL(1),IEEE4,False)
  Average (1,LC_AOBCO2,IEEE4,False)
  Average (1,LC_AOBH2O,IEEE4,False)
  Average (1,TC_CORAW,IEEE4,FALSE)
  StdDev (1,TC_CORAW,IEEE4,FALSE)
  StdDev (1,LS3_CO2RAW,IEEE4,False)
  Average (2,PA_MUX2(9),fp2,False) ' mux 2
'LGR
  Average (4,LA_LGRSERIAL(1),IEEE4,FALSE)
  StdDev (1,LA_LGRSERIAL(4),IEEE4,FALSE)
  Average (1,LA_LGRSERIAL(6),IEEE4,FALSE)
  StdDev (1,LA_LGRSERIAL(6),IEEE4,FALSE) 
  Average (3,LA_LGRSERIAL(8),IEEE4,FALSE)  


'  Average (10,PA_PICARROSERIAL(1),IEEE4,false)
'  StdDev (1,PA_PICARROSERIAL(3),IEEE4,false)
'  StdDev (1,PA_PICARROSERIAL(5),IEEE4,false)
'  StdDev (1,PA_PICARROSERIAL(7),IEEE4,false)
'  StdDev (1,PA_PICARROSERIAL(8),IEEE4,false)
    
'PICARRO
  Average (8,PA_PICARROSERIAL(1),IEEE4,false)
  StdDev (1,PA_PICARROSERIAL(1),IEEE4,false)
  StdDev (1,PA_PICARROSERIAL(2),IEEE4,false)
  StdDev (1,PA_PICARROSERIAL(7),IEEE4,false)
  StdDev (1,PA_PICARROSERIAL(8),IEEE4,false)
  
EndTable

'Define Subroutines'Sub
Sub DETERMINESYSMODE(PA_5MMODS(20),PV_SYSMODE,PV_CALMODE)

If PV_5MMOD273 = 161 Then PV_CALMODE = 2
If PV_5MMOD273 = 28 Then PV_CALMODE = 1

If PV_CALMODE = 0 Then
  Select Case PV_5MMOD7
    Case 0 
      PV_SYSMODE = PV_MOD7STEP1
    Case 1
      PV_SYSMODE = PV_MOD7STEP2
    Case 2
      PV_SYSMODE = PV_MOD7STEP3
    Case 3
      PV_SYSMODE = PV_MOD7STEP4
    Case 4
      PV_SYSMODE = PV_MOD7STEP5
    Case 5
      PV_SYSMODE = PV_MOD7STEP6
    Case 6
      PV_SYSMODE = PV_MOD7STEP7
  EndSelect
  If PV_5MMOD28 = 20 Then PV_SYSMODE = 1226
EndIf

Select Case PV_5MMOD240
  Case 62
    PV_SYSMODE = 1513
  Case 125
    PV_SYSMODE = 1513
  Case 188
    PV_SYSMODE = 1523
EndSelect
      
If PV_CALMODE = 1 Then
  PV_CALCOUNT = PV_CALCOUNT + 1
    Select Case PV_CALCOUNT
    Case 1 
      PV_SYSMODE = 1111
    Case 2
      PV_SYSMODE = 1212
    Case 3
      PV_SYSMODE = 1313
    Case 4 To 100 
      PV_SYSMODE = 1426
      PV_CALMODE = 0
      PV_CALCOUNT = 0
  EndSelect
EndIf

If PV_CALMODE = 2 Then
  PV_CALCOUNT = PV_CALCOUNT + 1
    Select Case PV_CALCOUNT
    Case 1 
      PV_SYSMODE = 1121
    Case 2
      PV_SYSMODE = 1222
    Case 3
      PV_SYSMODE = 1323
    Case 4 To 100 
      PV_SYSMODE = 1426
      PV_CALMODE = 0
      PV_CALCOUNT = 0
  EndSelect
EndIf

If PV_CALMODE = 3 Then
  PV_CALCOUNT = PV_CALCOUNT + 1
    Select Case PV_CALCOUNT
    Case 1 
      PV_SYSMODE = 1121
    Case 2
      PV_SYSMODE = 1222
    Case 3
      PV_SYSMODE = 1323
    Case 4
      PV_SYSMODE = 1426
    Case 5 To 100
      PV_SYSMODE = 1526
      PV_CALMODE = 0
      PV_CALCOUNT = 0
  EndSelect
EndIf

If PV_SYSMODESUB = -1 Then
  For I=1 To 10
    If PV_SYSMODE = PA_SYSMODESUBOLD(I) Then PV_SYSMODE = PA_SYSMODESUBNEW(I)
  Next I
EndIf

EndSub

Sub DETSOLENOIDSET(CD16A_SOLENOIDS(20),PV_SYSMODE)
  
PV_SYSMODECO2 = FIX(PV_SYSMODE/100.0)
PV_SYSMODECO = PV_SYSMODE - 100*PV_SYSMODECO2

  For i=0 To 16 
    CD16A_SOLENOIDS(I) = 0
  Next i
  
  If PV_SYSMODE = 0  Then
    CD16A_SOLENOIDS(7) = 0
  Else
    CD16A_SOLENOIDS(7) = -1
  EndIf
  
  If PV_SYSMODECO2 < 20 Then 
    CD16A_SOLENOIDS(8) = -1
  EndIf
  If PV_SYSMODECO < 20 Then 
    CD16A_SOLENOIDS(12) = -1
  EndIf
  If PV_SYSMODECO > 23 Then 
    CD16A_SOLENOIDS(16) = -1
  EndIf
   If PV_SYSMODECO > 13 AND PV_SYSMODECO < 17 Then 
    CD16A_SOLENOIDS(16) = -1
  EndIf 
  
   Select Case PV_SYSMODECO2
    Case 21
      CD16A_SOLENOIDS(15) = -1
    Case 22
      CD16A_SOLENOIDS(14) = -1
    Case 23
      CD16A_SOLENOIDS(13) = -1
    Case 11
      CD16A_SOLENOIDS(2) = -1
    Case 12
      CD16A_SOLENOIDS(3) = -1
    Case 13
      CD16A_SOLENOIDS(4) = -1
    Case 14
      CD16A_SOLENOIDS(1) = -1
    Case 15
      CD16A_SOLENOIDS(5) = -1  
  EndSelect 
  
  Select Case PV_SYSMODECO
    Case 21
      CD16A_SOLENOIDS(15) = -1
    Case 22
      CD16A_SOLENOIDS(14) = -1
    Case 23
      CD16A_SOLENOIDS(13) = -1
    Case 24
      CD16A_SOLENOIDS(15) = -1     
    Case 25
      CD16A_SOLENOIDS(14) = -1
    Case 26
      CD16A_SOLENOIDS(13) = -1
    Case 11
      CD16A_SOLENOIDS(9) = -1
    Case 12
      CD16A_SOLENOIDS(10) = -1
    Case 13
      CD16A_SOLENOIDS(11) = -1
    Case 14
      CD16A_SOLENOIDS(9) = -1    
    Case 15
      CD16A_SOLENOIDS(10) = -1   
    Case 16
      CD16A_SOLENOIDS(11) = -1 
  EndSelect

    
EndSub	

Sub AUTOMATEDFLASKSAMPLING()
  
EndSub


	'Main Program
BeginProg

PV_C1VALUE = 353.05
PV_C2VALUE = 381.53
PV_C3VALUE = 407.72
PV_C4VALUE = 459.78
PV_COLVALUE = 91.55
PV_COHVALUE = 335.5
PV_COTVALUE = 224.8

PV_FLASKSAMPLE_SINTODAY1 = 75900 '
PV_FLASKSAMPLE_SINTODAY2 = 99999 
PV_FLASKDWELLSYSMODE = 2323 '
PV_FLASKDWELL5MININTERVALS = 6 ' 1800 = 30 MINUTES
PV_FLASKFREQ = 2 '

SDMAO41_CO2FLOW = 2500.0
SDMAO42_CO2PRES = 3850.0
SDMAO43_COFLOW = 1500.0
SDMAO44_COPRES = 4000.0
PV_MOD7STEP1 = 2121
PV_MOD7STEP2 = 2222
PV_MOD7STEP3 = 2323
PV_MOD7STEP4 = 2121
PV_MOD7STEP5 = 2222
PV_MOD7STEP6 = 2323
PV_MOD7STEP7 = 2326

PV_CALMODE = 0
PA_FLAG(4) = -1
PA_FLAG(1) = -1


	Scan (5,Sec,0,0)

    SDMSIO4(PA_DUMMY(),1,8,4,1024,50,0,1,1.0,0) ' "CO" FOR LGR
		SDMSIO4(PA_DUMMY(),1,8,5,3,0,0,1,1.0,0) ' flush all buffers
	  SDMSIO4(PA_DUMMY(),1,8,2,1024,21,0,1,1.0,0) ' "(RS232(PollNow))"
		SDMSIO4(PA_DUMMY(),1,8,2,1025,10,0,1,1.0,0) ' licor line feed termination character
		SDMSIO4(PA_DUMMY(),1,8,3,2305,176,999,0,1.0,0) ' TecoLeadingdentifier
		SDMSIO4(PA_DUMMY(),1,8,3,1024,50,0,1,1.0,0) ' "CO" to teco
	  SDMSIO4(PA_DUMMY(),1,8,3,1025,13,0,1,1.0,0) ' termination line feed to teco
		SDMSIO4(PA_DUMMY(),1,8,3,1025,10,0,1,1.0,0) ' termination line feed to teco
		If PV_PICARRODATAEXISTS Then 
		  SDMSIO4(PA_DUMMY(),1,8,1,1024,70,0,1,1.0,0) ' SEND _MEAS_GETCONC TO PICARRO  
      SDMSIO4(PA_DUMMY(),1,8,1,2305,13,10,1,1.0,0) ' SEND _MEAS_GETCONC TO PICARRO  
    EndIf
    
	  RealTime(PA_TIME)
    PV_MOD5SEC = PV_SECONDS MOD 5
    PV_MOD30SEC = PV_SECONDS MOD 30
	  PV_SINTODAY = PV_HOURS*3600 + PV_MINUTES*60 + PV_SECONDS
       'SAMPLE THE FLASK AT THE APPROPRIATE TIME OF DAY
     If (PV_SINTODAY = PV_FLASKSAMPLE_SINTODAY1 OR PV_SINTODAY = PV_FLASKSAMPLE_SINTODAY2) Then
           PV_DAYOFYEARMOD2 = PV_DAYOFYEAR MOD 2
           If (PV_FLASKFREQ = 1 AND PV_DAYOFYEARMOD2 = 1) OR PV_FLASKFREQ = 2 Then
             PV_FLASKSAMPLE = -1
             PV_FLASKSAMPLINGDWELL = -1
           EndIf
    EndIf 
        
	  If TimeIntoInterval(0,300,2) Then
	    If PV_CALMODE = 0  AND PV_FLASKSAMPLINGDWELL = 0 Then PV_5MINCOUNT = PV_5MINCOUNT + 1 'DON'T COUNT IF CALIBRATION OR FLASK SAMPLING
	    If PV_CALMODE <> 0 AND PV_FLASKSAMPLINGDWELL = -1 Then 'TERMINATE A CALIBRATION IF A FLASK SAMPLE HAPPENS
	      PV_5MINCOUNT = PV_5MINCOUNT - 1
	      PV_CALMODE = 0
	      PV_CALCOUNT = 0
	    EndIf
	    If PV_5MINCOUNT = 99999 Then PV_5MINCOUNT = 0
	    PV_5MMOD7 = PV_5MINCOUNT MOD 7
	    PV_5MMOD14 = PV_5MINCOUNT MOD 14
	    PV_5MMOD28 = PV_5MINCOUNT MOD 28
	    PV_5MMOD273 = PV_5MINCOUNT MOD 273
	    PV_5MMOD1911 = PV_5MINCOUNT MOD 1911
	    PV_5MMOD240 = PV_5MINCOUNT MOD 240
	    Call DETERMINESYSMODE(PA_5MMODS(),PV_SYSMODE,PV_CALMODE) 
	    If PV_FLASKSAMPLINGDWELL = -1 Then 
	       If PV_FLASKDWELL5MCOUNT < PV_FLASKDWELL5MININTERVALS Then
	          PV_SYSMODE=PV_FLASKDWELLSYSMODE 
	          PV_FLASKDWELL5MCOUNT = PV_FLASKDWELL5MCOUNT + 1  
	       Else
	          PV_FLASKDWELL5MCOUNT = 0
	          PV_FLASKSAMPLINGDWELL = 0
	       EndIf 
	    EndIf
	  EndIf
    
' ************************* SET SOLENOID VALVES BASED ON SYSMODE

   PV_SYSMODECO2 = FIX(PV_SYSMODE/100.0)
   PV_SYSMODECO = PV_SYSMODE - 100*PV_SYSMODECO2
   If PV_SYSMODECO2_OLD <> PV_SYSMODECO2 Then 
     PV_SMCOUNTCO2 = 0 
   EndIf
   If PV_SYSMODECO_OLD <> PV_SYSMODECO Then 
     PV_SMCOUNTCO = 0 
   EndIf 
   PV_SMCOUNTCO = PV_SMCOUNTCO + 1
   PV_SMCOUNTCO2 = PV_SMCOUNTCO2 + 1  
   PV_SYSMODECO2_OLD = PV_SYSMODECO2 
   PV_SYSMODECO_OLD = PV_SYSMODECO 
 
   If PA_FLAG(1) = -1 Then PV_SYSMODE=2323 ' STATRT WITH SYSMODE 2323
   
   Call DETSOLENOIDSET(CD16A_SOLENOIDS(),PV_SYSMODE)
    SDMCD16AC (CD16A_SOLENOIDS(),1,4) ' SET THE SOLENOIDS
    SDMCD16AC (CD16B_PUMPS_N_POWER(),1,5) ' SET THE SOLENOIDS
	  ' get time stuff straightened out
    ' turn on pumps and licor if flag 1 is high (formerly startup sequence)
    If PA_FLAG(1) = -1 Then
       For J=1 To 9
          CD16B_PUMPS_N_POWER(J) = -1
          Delay (1,16,mSec)
          SDMCD16AC (CD16B_PUMPS_N_POWER(),1,5)
       Next
       PA_FLAG(1) = 0
       PA_FLAG(4) = -1
    EndIf
  
    If PV_FLASKSAMPLE = -1 Then 
       CD16B_PUMPS_N_POWER(14) = -1
       SDMCD16AC (CD16B_PUMPS_N_POWER(),1,5)
       Delay (1,180,mSec)
       CD16B_PUMPS_N_POWER(14) = 0
       SDMCD16AC (CD16B_PUMPS_N_POWER(),1,5) 
       PV_FLASKSAMPLE = 0
    EndIf
    
       'do this if flag 4 is high (set up the serial communications)
    If PA_FLAG(4) = -1 Then
       
       SDMSIO4(PA_DUMMY(),1,8,4,2049,9146,0,0,1.0,0) ' LGR 9600 BAUD
       SDMSIO4(PA_DUMMY(),1,8,4,2054,1999,0,0,1.0,0) ' receive filter...licor convert ascii number to csfloating point
       
       SDMSIO4(PA_DUMMY(),1,8,1,2049,9146,0,0,1.0,0) ' PIARRO 19200 BAUD
       SDMSIO4(PA_DUMMY(),1,8,1,2054,1999,0,0,1.0,0) ' receive filter...licor convert ascii number to csfloating point
       
       SDMSIO4(PA_DUMMY(),1,8,2,2049,4146,0,0,1.0,0) ' Licor is xon/xoff/9600,8,1
       SDMSIO4(PA_DUMMY(),1,8,3,2049,3146,0,0,1.0,0) ' teco is  N8,1
       SDMSIO4(PA_DUMMY(),1,8,2,2054,1999,0,0,1.0,0) ' receive filter...licor convert ascii number to csfloating point
       
       SDMSIO4(PA_DUMMY(),1,8,3,2054,1999,0,0,1.0,0) ' recieve filter ...teco is  N8,1

       SDMSIO4(PA_DUMMY(),1,8,2,1024,20,0,0,1.0,0) ' licor strst 20 "RS232(imestamp none)(rate polled)(filter(time 2))"
       SDMSIO4(PA_DUMMY(),1,8,2,1025,10,0,0,1.0,0) ' termination character line feed to licor
       Delay (1,200,mSec)
       SDMSIO4(PA_DUMMY(),1,8,2,1024,30,0,0,1.0,0) ' licor strst 20 "RS232(Sources("CO2A W"".......)
       SDMSIO4(PA_DUMMY(),1,8,2,1025,10,0,0,1.0,0) ' termination character line feed to licor
  Delay (1,200,mSec)     

       'SDMSIO4(PA_DUMMY(),1,8,1,2305,30,0,0,1.0,0) ' licor strst 20 "RS232(Sources("CO2A W"".......)
       'SDMSIO4(PA_DUMMY(),1,8,1,1025,10,0,0,1.0,0) ' termination character line feed to licor
       
       Delay (1,200,mSec)
       PA_FLAG(4) = 0 
    EndIf

' **************************  BEGIN AND



    SDMAO4(SDMAO4OUT(),4,0)

   ' read the multiplexer signals
    PortSet(5,1) 
    PortSet(6,1)
    For J=1 To 32 
      PortSet (4,1)
      Delay(0,10,mSec)
      PortSet (4,0)
      VoltDiff(PA_MUX1(J),1,mv5000,1,0,0,_60Hz,2,0)
      If J < 25 Then 
        VoltDiff(PA_MUX2(J),1,mv5000,2,0,0,_60Hz,2,0)
      EndIf
    Next J  
    PortSet(5,0) 
    PortSet(6,0)
    VoltDiff(CRXD3_LIBXPR,1,mv5000,3,0,0,0,-2.0,0)
    VoltDiff(CRXD4_TROOM,1,mv2500,4,0,0,0,1,0)
    VoltDiff(CRXD5_PAR,1,mV25C,5,0,0,0,1,0)
    PulseCount(CRXP1_RAIN,1,1 ,2,0,1,0)
     
    'read and process licor and TECO data0.
    Delay (1,1000,mSec)

SDMSIO4 (PA_LICORSERIAL(),1,8,2,4,0,0,11,1.0,0) 
SDMSIO4 (PA_TECOSERIAL(),1,8,3,4,0,0,4,1.0,0)
SDMSIO4 (PA_PICARROSERIAL(),1,8,1,4,0,0,10,1.0,0)
SDMSIO4 (LA_LGRSERIAL(),1,8,4,4,0,0,10,1.0,0)

If PV_PICARRODATAEXISTS = False Then
   For J  = 1 To 12 
     PA_PICARROSERIAL(J) = -1.0
   Next J
EndIf


LC_AOBCO2 = LS1_CO2AW/LS2_CO2BW
LC_AOBH2O = LS4_H2OAW/LS5_H2OBW
PA_TECOSERIAL(3) = PA_TECOSERIAL(1)*EXP(2.30259*PA_TECOSERIAL(2))
    
    ' PUT A FILTER HERE FOR BAD CO DATA AND CO2 DATA
TIM2=Timer(1,mSec,4)
TIM = TIM2 - TIM1
PV_CO2ESTIMATE = LS3_CO2RAW + PV_LICOROFFSET
If (PV_SMCOUNTCO2 > 6) Then
  AvgRun (PV_CO2RUNAVG,1,LS3_CO2RAW,12)
  If (PV_SMCOUNTCO2 > 8) Then
    If (PV_SYSMODECO2 = 11) Then PV_LASTC1 = PV_CO2RUNAVG
    If (PV_SYSMODECO2 = 12) Then PV_LASTC2 = PV_CO2RUNAVG
    If (PV_SYSMODECO2 = 13) Then PV_LASTC3 = PV_CO2RUNAVG
    If (PV_SYSMODECO2 = 14) Then PV_LASTC4 = PV_CO2RUNAVG
    If (PV_SYSMODECO2 = 15) Then PV_LASTCT = PV_CO2RUNAVG
  EndIf
EndIf

If (PV_SMCOUNTCO > 6) Then
  AvgRun (PV_CORUNAVG,1,TC_CORAW,12)
  If (PV_SMCOUNTCO > 8) Then
    If (PV_SYSMODECO = 11) Then PV_LASTCOLOW = PV_CORUNAVG
    If (PV_SYSMODECO = 12) Then PV_LASTCOHIGH = PV_CORUNAVG
    If (PV_SYSMODECO = 13) Then PV_LASTCOTGT = PV_CORUNAVG
    If (PV_SYSMODECO > 23) OR (PV_SYSMODECO > 13 AND PV_SYSMODECO < 20) Then PV_LASTCOZERO = PV_CORUNAVG
  EndIf
EndIf

' CALCULATE CO2 CURVE IF CAL IS ENDED
If PV_LASTC1 <> 0 AND PV_LASTC2 <> 0 AND PV_LASTC3 <> 0 AND PV_LASTC4 <> 0 AND (PV_CALMODE = 1 OR PV_CALMODE = 2) Then PV_RECALCULATECO2CAL = -1 ' ONLY CALCULATE CURVE DURING FULL CAL 
If PV_LASTCOLOW <> 0 AND PV_LASTCOHIGH <> 0 AND PV_LASTCOTGT <> 0 AND PV_LASTCOZERO <> 0 AND PV_CALMODE = 1 Then PV_RECALCULATECOCAL = -1
  
If PV_RECALCULATECO2CAL Then ' ONLY CALCULATE CURVE DURING FULL CAL
  AVGX=(PV_LASTC1 + PV_LASTC2 + PV_LASTC3 + PV_LASTC4)/4.0
  AVGY=(PV_C1VALUE + PV_C2VALUE + PV_C3VALUE + PV_C4VALUE)/4.0
  SXX = (PV_LASTC1-AVGX)^2 + (PV_LASTC2-AVGX)^2 + (PV_LASTC3-AVGX)^2 + (PV_LASTC4 - AVGX)^2
  SXY = (PV_LASTC1-AVGX)*(PV_C1VALUE-AVGY) + (PV_LASTC2-AVGX)*(PV_C2VALUE-AVGY) + (PV_LASTC3-AVGX)*(PV_C3VALUE-AVGY) + (PV_LASTC4 - AVGX)*(PV_C4VALUE-AVGY)
  PV_MLIN_CO2 = SXY/SXX
  PV_BLIN_CO2 = AVGY - PV_MLIN_CO2*AVGX
  PV_CO2CALC2 = PV_LASTC2 
  PV_RECALCULATECO2CAL = 0
EndIf

PV_CO2ESTIMATE = LS3_CO2RAW*PV_MLIN_CO2 + PV_BLIN_CO2 + (PV_LASTC2 - PV_CO2CALC2)

If PV_RECALCULATECOCAL = -1  Then ' ONLY CALCULATE CURVE DURING FULL CAL
  COAVGX=(PV_LASTCOLOW + PV_LASTCOHIGH + PV_LASTCOTGT + PV_LASTCOZERO)/4.0
  COAVGY=(PV_COLVALUE + PV_COHVALUE + PV_COTVALUE + 0.0)/4.0
  COSXX = (PV_LASTCOLOW-COAVGX)^2 + (PV_LASTCOHIGH-COAVGX)^2 + (PV_LASTCOTGT-COAVGX)^2 + (PV_LASTCOZERO - COAVGX)^2
  COSXY = (PV_LASTCOLOW-COAVGX)*(PV_COLVALUE-COAVGY) + (PV_LASTCOHIGH-COAVGX)*(PV_COHVALUE-COAVGY) + (PV_LASTCOTGT-COAVGX)*(PV_COTVALUE-COAVGY) + (PV_LASTCOZERO - COAVGX)*(0-COAVGY)
  PV_MLIN_CO = COSXY/COSXX
  PV_BLIN_CO = AVGY - PV_MLIN_CO*COAVGX
  PV_COCALZERO = PV_LASTCOZERO
  PV_RECALCULATECOCAL = 0
EndIf

PV_COESTIMATE = TC_CORAW*PV_MLIN_CO + PV_BLIN_CO + (PV_LASTCOZERO - PV_COCALZERO)

CallTable lab_raw
'CallTable bao_test
		'CallTable lbt_afs



	NextScan
	
' Alieases	




	
EndProg

